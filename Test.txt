                                ;;==== BASIC ANATOMY OF A NES FILE ====
                                ;;=====================================
                                
                                ;;  1. The iNES Header
      4E 45 53 1A                   .db "NES", $1a   ; iNes identifier
      01                            .db $01          ; number of PRG-Rom blocks the game will have
      01                            .db $01          ; number of CHR-Rom blocks the game will have
      00 01                         .db $00, $01     ; control bytes
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00  ;; filler
                                
                                ;; 2. Constants and Variables
                                    .enum $0000  ; This is the Zero Page
00000                           
00000                                   ; variables will eventually go here
00000                           
00000                               .ende
                                
                                ;; 3. Set the starting point fot the code
                                    .org $C000  ; This starts the code at address $C000
0C000                           
0C000                           
0C000                           ;; 4. The RESET routine
0C000                           RESET:
0C000 78                            SEI        ; SEI tells the code to ignore interupts for the routine
0C001 A9 00                         LDA #$00   ; Load 0 into the accumulator
0C003 8D 00 20                      STA $2000  ; Disables the NMI
0C006 8D 01 20                      STA $2001  ; Disables the rendering
0C009 8D 10 40                      STA $4010
0C00C 8D 15 40                      STA $4015
0C00F A9 40                         LDA #$40   ; Loads HEX: 40_16 (= 64_10) into accumulator
0C011 8D 17 40                      STA $4017
0C014 D8                            CLD        ; Disables decimal mode
0C015 A2 FF                         LDX #$FF   ; Loads 255_10 into X register
0C017 9A                            TXS        ; Initializes the stack
0C018                           
0C018                           ;; Waits for vBlank to be reached (i.e. waits for a new frame)
0C018 2C 02 20                      bit $2002
0C01B                           vBlankWait1:
0C01B 2C 02 20                      bit $2002
0C01E 10 FB                         BPL vBlankWait1
0C020                           
0C020                               ;; CLEAR OUT MEMORY & STUFF HERE
0C020 A9 00                         LDA #$00  ; Loads 0 into the accumulator
0C022 A2 00                         LDX #$00  ; Loads 0 into the X register (X will increment through [0, 255])
0C024                           ClearMemoryLoop:
0C024 95 00                         STA $0000, x  ; Stores the accumulator into addr $0000 + x
0C026 9D 00 01                      STA $0100, x  ; Stores the accumulator into addr $0100 + x
0C029 9D 00 02                      STA $0200, x  ; Stores the accumulator into addr $0200 + x
0C02C 9D 00 03                      STA $0300, x  ; Stores the accumulator into addr $0300 + x
0C02F 9D 00 04                      STA $0400, x  ; Stores the accumulator into addr $0400 + x
0C032 9D 00 05                      STA $0500, x  ; Stores the accumulator into addr $0500 + x
0C035 9D 00 06                      STA $0600, x  ; Stores the accumulator into addr $0600 + x
0C038 9D 00 07                      STA $0700, x  ; Stores the accumulator into addr $0700 + x
0C03B E8                            INX           ; X++
0C03C D0 E6                         BNE ClearMemoryLoop  ; Will continue to loop unitl X overflows back to 0
0C03E                           
0C03E                           ;; same as vBlankWait1. We specifically want this to run after Clearing memory
0C03E                           vBlankWait2:
0C03E 2C 02 20                      bit $2002
0C041 10 FB                         BPL vBlankWait2
0C043                           
0C043                               ;; Re-Enable things after clearing memory & setting up
0C043 A9 90                         LDA #%10010000  ; Loads this binary number into accumulator
0C045 8D 00 20                      STA $2000       ; Re-Enables NMI
0C048                           
0C048 A9 1E                         LDA #%00011110  ; Loads this binary number into accumulator
0C04A 8D 01 20                      STA $2001       ; Re-Enables rendering
0C04D                           
0C04D                               ;; At the end of RESET, jump to the Main Game Code
0C04D 4C 6F C0                      JMP MainGameLoop
0C050                           
0C050                           
0C050                           ;; 5. The NMI (Non-Maskable Interrupt): Happens at the end of every frame
0C050                           ;;                                      When the game does its PPU updates
0C050                           ;;                                      & prepares to draw the next frame.
0C050                           NMI:
0C050                               ;; Push A, X, & Y registers to the stack to preserve them
0C050 48                            PHA  ; push accumulator to the stack
0C051 8A                            TXA  ; A <= X
0C052 48                            PHA
0C053 98                            TYA  ; A <= Y
0C054 48                            PHA  ; Stack in Descending Order: Y, X, A
0C055                           
0C055                               ;;===================
0C055                               ;; DO NMI STUFF HERE
0C055                               ;; Transfer sprites to PPU
0C055 A5 00                         LDA $00
0C057 8D 03 20                      STA $2003  ; sets the low byte of the sprite RAM address
0C05A A9 02                         LDA #$02
0C05C 8D 14 40                      STA $4014  ; sets high byte of the sprite RAM addr
0C05F                                          ; sprite RAM addr: $0200 (16-bit addr)
0C05F                           
0C05F                               ;; Re-Enable Things
0C05F A9 90                         LDA #%10010000  ; Re-Enable NMI
0C061 8D 00 20                      STA $2000
0C064 A9 1E                         LDA #%00011110  ; RE-Enables rendering
0C066                           
0C066 8D 01 20                      STA $2001
0C069                               ;;===================
0C069                           
0C069                               ;; Pull Y, X, & A registers from the stack
0C069 68                            PLA  ; Pull Y from stack and into the accumulator
0C06A A8                            TAY  ; Y <= A = Y_old
0C06B 68                            PLA
0C06C AA                            TAX  ; X <= A = X_old
0C06D 68                            PLA  ; A <= A_old
0C06E                           
0C06E                               ;; At the end of NMI, we want to "Return from Interrupt"
0C06E 40                            RTI  ; returns back to the point in the code we were when the frame ended
0C06F                           
0C06F                           ;; 6. The Main Game Loop
0C06F                           MainGameLoop:
0C06F                               ;; This is where all game logic will go
0C06F                           
0C06F 4C 6F C0                      JMP MainGameLoop
0C072                           
0C072                           ;; 7. Sub Routines
0C072                           
0C072                           
0C072                           ;; 8. Includes and data tables
0C072                           
0C072                           
0C072                           
0C072                           ;; 9. The Vectors (last few bytes of the ROM file)
0C072                           ;;                Determine the location of: Reset, NMI, (& other interupts)
0C072                           
0C072 00 00 00 00 00 00 00 00..     .org $fffa  ; sets us up at the very end of the code.
0FFFA 50 C0                         .dw NMI     ; NMI points to label NMI
0FFFC 00 C0                         .dw RESET   ; Reset points to label RESET
0FFFE 00 00                         .dw 00
